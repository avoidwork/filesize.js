{"version":3,"file":"filesize.min.js","sources":["../src/constants.js","../src/helpers.js","../src/filesize.js"],"sourcesContent":["// Error Messages\nexport const INVALID_NUMBER = \"Invalid number\";\nexport const INVALID_ROUND = \"Invalid rounding method\";\n\n// Standard Types\nexport const IEC = \"iec\";\nexport const JEDEC = \"jedec\";\nexport const SI = \"si\";\n\n// Unit Types\nexport const BIT = \"bit\";\nexport const BITS = \"bits\";\nexport const BYTE = \"byte\";\nexport const BYTES = \"bytes\";\nexport const SI_KBIT = \"kbit\";\nexport const SI_KBYTE = \"kB\";\n\n// Output Format Types\nexport const ARRAY = \"array\";\nexport const FUNCTION = \"function\";\nexport const OBJECT = \"object\";\nexport const STRING = \"string\";\n\n// Processing Constants\nexport const EXPONENT = \"exponent\";\nexport const ROUND = \"round\";\n\n// Special Characters and Values\nexport const E = \"e\";\nexport const EMPTY = \"\";\nexport const PERIOD = \".\";\nexport const S = \"s\";\nexport const SPACE = \" \";\nexport const ZERO = \"0\";\n\n// Data Structures\nexport const STRINGS = {\n\tsymbol: {\n\t\tiec: {\n\t\t\tbits: [\"bit\", \"Kibit\", \"Mibit\", \"Gibit\", \"Tibit\", \"Pibit\", \"Eibit\", \"Zibit\", \"Yibit\"],\n\t\t\tbytes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"]\n\t\t},\n\t\tjedec: {\n\t\t\tbits: [\"bit\", \"Kbit\", \"Mbit\", \"Gbit\", \"Tbit\", \"Pbit\", \"Ebit\", \"Zbit\", \"Ybit\"],\n\t\t\tbytes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n\t\t}\n\t},\n\tfullform: {\n\t\tiec: [\"\", \"kibi\", \"mebi\", \"gibi\", \"tebi\", \"pebi\", \"exbi\", \"zebi\", \"yobi\"],\n\t\tjedec: [\"\", \"kilo\", \"mega\", \"giga\", \"tera\", \"peta\", \"exa\", \"zetta\", \"yotta\"]\n\t}\n};\n\n// Pre-computed lookup tables for performance optimization\nexport const BINARY_POWERS = [\n\t1, // 2^0\n\t1024, // 2^10\n\t1048576, // 2^20\n\t1073741824, // 2^30\n\t1099511627776, // 2^40\n\t1125899906842624, // 2^50\n\t1152921504606846976, // 2^60\n\t1180591620717411303424, // 2^70\n\t1208925819614629174706176 // 2^80\n];\n\nexport const DECIMAL_POWERS = [\n\t1, // 10^0\n\t1000, // 10^3\n\t1000000, // 10^6\n\t1000000000, // 10^9\n\t1000000000000, // 10^12\n\t1000000000000000, // 10^15\n\t1000000000000000000, // 10^18\n\t1000000000000000000000, // 10^21\n\t1000000000000000000000000 // 10^24\n];\n\n// Pre-computed log values for faster exponent calculation\nexport const LOG_2_1024 = Math.log(1024);\nexport const LOG_10_1000 = Math.log(1000);\n","import {\n\tARRAY,\n\tBINARY_POWERS,\n\tBIT,\n\tBITS,\n\tBYTE,\n\tBYTES,\n\tDECIMAL_POWERS,\n\tE,\n\tEMPTY,\n\tEXPONENT,\n\tIEC,\n\tJEDEC,\n\tOBJECT,\n\tPERIOD,\n\tSI,\n\tSTRINGS,\n\tZERO\n} from \"./constants.js\";\n\n// Cached configuration lookup for better performance\nconst STANDARD_CONFIGS = {\n\t[SI]: {isDecimal: true, ceil: 1000, actualStandard: JEDEC},\n\t[IEC]: {isDecimal: false, ceil: 1024, actualStandard: IEC},\n\t[JEDEC]: {isDecimal: false, ceil: 1024, actualStandard: JEDEC}\n};\n\n/**\n * Optimized base configuration lookup\n * @param {string} standard - Standard type\n * @param {number} base - Base number\n * @returns {Object} Configuration object\n */\nexport function getBaseConfiguration (standard, base) {\n\t// Use cached lookup table for better performance\n\tif (STANDARD_CONFIGS[standard]) {\n\t\treturn STANDARD_CONFIGS[standard];\n\t}\n\n\t// Base override\n\tif (base === 2) {\n\t\treturn {isDecimal: false, ceil: 1024, actualStandard: IEC};\n\t}\n\n\t// Default\n\treturn {isDecimal: true, ceil: 1000, actualStandard: JEDEC};\n}\n\n/**\n * Optimized zero value handling\n * @param {number} precision - Precision value\n * @param {string} actualStandard - Standard to use\n * @param {boolean} bits - Whether to use bits\n * @param {Object} symbols - Custom symbols\n * @param {boolean} full - Whether to use full form\n * @param {Array} fullforms - Custom full forms\n * @param {string} output - Output format\n * @param {string} spacer - Spacer character\n * @returns {string|Array|Object|number} Formatted result\n */\nexport function handleZeroValue (precision, actualStandard, bits, symbols, full, fullforms, output, spacer) {\n\tconst result = [];\n\tresult[0] = precision > 0 ? (0).toPrecision(precision) : 0;\n\tconst u = result[1] = STRINGS.symbol[actualStandard][bits ? BITS : BYTES][0];\n\n\tif (output === EXPONENT) {\n\t\treturn 0;\n\t}\n\n\t// Apply symbol customization\n\tif (symbols[result[1]]) {\n\t\tresult[1] = symbols[result[1]];\n\t}\n\n\t// Apply full form\n\tif (full) {\n\t\tresult[1] = fullforms[0] || STRINGS.fullform[actualStandard][0] + (bits ? BIT : BYTE);\n\t}\n\n\t// Return in requested format\n\treturn output === ARRAY ? result : output === OBJECT ? {\n\t\tvalue: result[0],\n\t\tsymbol: result[1],\n\t\texponent: 0,\n\t\tunit: u\n\t} : result.join(spacer);\n}\n\n/**\n * Optimized value calculation with bits handling\n * @param {number} num - Input number\n * @param {number} e - Exponent\n * @param {boolean} isDecimal - Whether to use decimal powers\n * @param {boolean} bits - Whether to calculate bits\n * @param {number} ceil - Ceiling value for auto-increment\n * @returns {Object} Object with val and e properties\n */\nexport function calculateOptimizedValue (num, e, isDecimal, bits, ceil) {\n\tconst d = isDecimal ? DECIMAL_POWERS[e] : BINARY_POWERS[e];\n\tlet result = num / d;\n\n\tif (bits) {\n\t\tresult *= 8;\n\t\t// Handle auto-increment for bits\n\t\tif (result >= ceil && e < 8) {\n\t\t\tresult /= ceil;\n\t\t\te++;\n\t\t}\n\t}\n\n\treturn {result, e};\n}\n\n/**\n * Optimized precision handling with scientific notation correction\n * @param {number} value - Current value\n * @param {number} precision - Precision to apply\n * @param {number} e - Current exponent\n * @param {number} num - Original number\n * @param {boolean} isDecimal - Whether using decimal base\n * @param {boolean} bits - Whether calculating bits\n * @param {number} ceil - Ceiling value\n * @param {Function} roundingFunc - Rounding function\n * @param {number} round - Round value\n * @returns {Object} Object with value and e properties\n */\nexport function applyPrecisionHandling (value, precision, e, num, isDecimal, bits, ceil, roundingFunc, round) {\n\tlet result = value.toPrecision(precision);\n\n\t// Handle scientific notation by recalculating with incremented exponent\n\tif (result.includes(E) && e < 8) {\n\t\te++;\n\t\tconst {result: valueResult} = calculateOptimizedValue(num, e, isDecimal, bits, ceil);\n\t\tconst p = round > 0 ? Math.pow(10, round) : 1;\n\t\tresult = (p === 1 ? roundingFunc(valueResult) : roundingFunc(valueResult * p) / p).toPrecision(precision);\n\t}\n\n\treturn {value: result, e};\n}\n\n/**\n * Optimized number formatting with locale, separator, and padding\n * @param {number|string} value - Value to format\n * @param {string|boolean} locale - Locale setting\n * @param {Object} localeOptions - Locale options\n * @param {string} separator - Custom separator\n * @param {boolean} pad - Whether to pad\n * @param {number} round - Round value\n * @returns {string|number} Formatted value\n */\nexport function applyNumberFormatting (value, locale, localeOptions, separator, pad, round) {\n\tlet result = value;\n\n\t// Apply locale formatting\n\tif (locale === true) {\n\t\tresult = result.toLocaleString();\n\t} else if (locale.length > 0) {\n\t\tresult = result.toLocaleString(locale, localeOptions);\n\t} else if (separator.length > 0) {\n\t\tresult = result.toString().replace(PERIOD, separator);\n\t}\n\n\t// Apply padding\n\tif (pad && round > 0) {\n\t\tconst resultStr = result.toString();\n\t\tconst x = separator || ((resultStr.match(/(\\D)/g) || []).pop() || PERIOD);\n\t\tconst tmp = resultStr.split(x);\n\t\tconst s = tmp[1] || EMPTY;\n\t\tconst l = s.length;\n\t\tconst n = round - l;\n\n\t\tresult = `${tmp[0]}${x}${s.padEnd(l + n, ZERO)}`;\n\t}\n\n\treturn result;\n}\n","import {\n\tARRAY,\n\tBIT,\n\tBITS,\n\tBYTE,\n\tBYTES,\n\tEMPTY,\n\tEXPONENT,\n\tFUNCTION,\n\tINVALID_NUMBER,\n\tINVALID_ROUND,\n\tLOG_10_1000,\n\tLOG_2_1024,\n\tOBJECT,\n\tROUND,\n\tS,\n\tSI_KBIT,\n\tSI_KBYTE,\n\tSPACE,\n\tSTRING,\n\tSTRINGS,\n} from \"./constants.js\";\nimport {\n\tapplyNumberFormatting,\n\tapplyPrecisionHandling,\n\tcalculateOptimizedValue,\n\tgetBaseConfiguration,\n\thandleZeroValue\n} from \"./helpers.js\";\n\n/**\n * Converts a file size in bytes to a human-readable string with appropriate units\n * @param {number|string|bigint} arg - The file size in bytes to convert\n * @param {Object} [options={}] - Configuration options for formatting\n * @param {boolean} [options.bits=false] - If true, calculates bits instead of bytes\n * @param {boolean} [options.pad=false] - If true, pads decimal places to match round parameter\n * @param {number} [options.base=-1] - Number base (2 for binary, 10 for decimal, -1 for auto)\n * @param {number} [options.round=2] - Number of decimal places to round to\n * @param {string|boolean} [options.locale=\"\"] - Locale for number formatting, true for system locale\n * @param {Object} [options.localeOptions={}] - Additional options for locale formatting\n * @param {string} [options.separator=\"\"] - Custom decimal separator\n * @param {string} [options.spacer=\" \"] - String to separate value and unit\n * @param {Object} [options.symbols={}] - Custom unit symbols\n * @param {string} [options.standard=\"\"] - Unit standard to use (SI, IEC, JEDEC)\n * @param {string} [options.output=\"string\"] - Output format: \"string\", \"array\", \"object\", or \"exponent\"\n * @param {boolean} [options.fullform=false] - If true, uses full unit names instead of abbreviations\n * @param {Array} [options.fullforms=[]] - Custom full unit names\n * @param {number} [options.exponent=-1] - Force specific exponent (-1 for auto)\n * @param {string} [options.roundingMethod=\"round\"] - Math rounding method to use\n * @param {number} [options.precision=0] - Number of significant digits (0 for auto)\n * @returns {string|Array|Object|number} Formatted file size based on output option\n * @throws {TypeError} When arg is not a valid number or roundingMethod is invalid\n * @example\n * filesize(1024) // \"1 KB\"\n * filesize(1024, {bits: true}) // \"8 Kb\"\n * filesize(1024, {output: \"object\"}) // {value: 1, symbol: \"KB\", exponent: 1, unit: \"KB\"}\n */\nexport function filesize (arg, {\n\tbits = false,\n\tpad = false,\n\tbase = -1,\n\tround = 2,\n\tlocale = EMPTY,\n\tlocaleOptions = {},\n\tseparator = EMPTY,\n\tspacer = SPACE,\n\tsymbols = {},\n\tstandard = EMPTY,\n\toutput = STRING,\n\tfullform = false,\n\tfullforms = [],\n\texponent = -1,\n\troundingMethod = ROUND,\n\tprecision = 0\n} = {}) {\n\tlet e = exponent,\n\t\tnum = Number(arg),\n\t\tresult = [],\n\t\tval = 0,\n\t\tu = EMPTY;\n\n\t// Optimized base & standard configuration lookup\n\tconst {isDecimal, ceil, actualStandard} = getBaseConfiguration(standard, base);\n\n\tconst full = fullform === true,\n\t\tneg = num < 0,\n\t\troundingFunc = Math[roundingMethod];\n\n\tif (typeof arg !== \"bigint\" && isNaN(arg)) {\n\t\tthrow new TypeError(INVALID_NUMBER);\n\t}\n\n\tif (typeof roundingFunc !== FUNCTION) {\n\t\tthrow new TypeError(INVALID_ROUND);\n\t}\n\n\t// Flipping a negative number to determine the size\n\tif (neg) {\n\t\tnum = -num;\n\t}\n\n\t// Fast path for zero\n\tif (num === 0) {\n\t\treturn handleZeroValue(precision, actualStandard, bits, symbols, full, fullforms, output, spacer);\n\t}\n\n\t// Optimized exponent calculation using pre-computed log values\n\tif (e === -1 || isNaN(e)) {\n\t\te = isDecimal ? Math.floor(Math.log(num) / LOG_10_1000) : Math.floor(Math.log(num) / LOG_2_1024);\n\t\tif (e < 0) {\n\t\t\te = 0;\n\t\t}\n\t}\n\n\t// Exceeding supported length, time to reduce & multiply\n\tif (e > 8) {\n\t\tif (precision > 0) {\n\t\t\tprecision += 8 - e;\n\t\t}\n\t\te = 8;\n\t}\n\n\tif (output === EXPONENT) {\n\t\treturn e;\n\t}\n\n\t// Calculate value with optimized lookup and bits handling\n\tconst {result: valueResult, e: valueExponent} = calculateOptimizedValue(num, e, isDecimal, bits, ceil);\n\tval = valueResult;\n\te = valueExponent;\n\n\t// Optimize rounding calculation\n\tconst p = e > 0 && round > 0 ? Math.pow(10, round) : 1;\n\tresult[0] = p === 1 ? roundingFunc(val) : roundingFunc(val * p) / p;\n\n\tif (result[0] === ceil && e < 8 && exponent === -1) {\n\t\tresult[0] = 1;\n\t\te++;\n\t}\n\n\t// Apply precision handling\n\tif (precision > 0) {\n\t\tconst precisionResult = applyPrecisionHandling(result[0], precision, e, num, isDecimal, bits, ceil, roundingFunc, round);\n\t\tresult[0] = precisionResult.value;\n\t\te = precisionResult.e;\n\t}\n\n\t// Cache symbol lookup\n\tconst symbolTable = STRINGS.symbol[actualStandard][bits ? BITS : BYTES];\n\tu = result[1] = (isDecimal && e === 1) ? (bits ? SI_KBIT : SI_KBYTE) : symbolTable[e];\n\n\t// Decorating a 'diff'\n\tif (neg) {\n\t\tresult[0] = -result[0];\n\t}\n\n\t// Applying custom symbol\n\tif (symbols[result[1]]) {\n\t\tresult[1] = symbols[result[1]];\n\t}\n\n\t// Apply locale, separator, and padding formatting\n\tresult[0] = applyNumberFormatting(result[0], locale, localeOptions, separator, pad, round);\n\n\tif (full) {\n\t\tresult[1] = fullforms[e] || STRINGS.fullform[actualStandard][e] + (bits ? BIT : BYTE) + (result[0] === 1 ? EMPTY : S);\n\t}\n\n\t// Optimized return logic\n\tif (output === ARRAY) {\n\t\treturn result;\n\t}\n\n\tif (output === OBJECT) {\n\t\treturn {\n\t\t\tvalue: result[0],\n\t\t\tsymbol: result[1],\n\t\t\texponent: e,\n\t\t\tunit: u\n\t\t};\n\t}\n\n\treturn spacer === SPACE ? `${result[0]} ${result[1]}` : result.join(spacer);\n}\n\n/**\n * Creates a partially applied version of filesize with preset options\n * @param {Object} [options={}] - Default options to apply to the returned function\n * @param {boolean} [options.bits=false] - If true, calculates bits instead of bytes\n * @param {boolean} [options.pad=false] - If true, pads decimal places to match round parameter\n * @param {number} [options.base=-1] - Number base (2 for binary, 10 for decimal, -1 for auto)\n * @param {number} [options.round=2] - Number of decimal places to round to\n * @param {string|boolean} [options.locale=\"\"] - Locale for number formatting, true for system locale\n * @param {Object} [options.localeOptions={}] - Additional options for locale formatting\n * @param {string} [options.separator=\"\"] - Custom decimal separator\n * @param {string} [options.spacer=\" \"] - String to separate value and unit\n * @param {Object} [options.symbols={}] - Custom unit symbols\n * @param {string} [options.standard=\"\"] - Unit standard to use (SI, IEC, JEDEC)\n * @param {string} [options.output=\"string\"] - Output format: \"string\", \"array\", \"object\", or \"exponent\"\n * @param {boolean} [options.fullform=false] - If true, uses full unit names instead of abbreviations\n * @param {Array} [options.fullforms=[]] - Custom full unit names\n * @param {number} [options.exponent=-1] - Force specific exponent (-1 for auto)\n * @param {string} [options.roundingMethod=\"round\"] - Math rounding method to use\n * @param {number} [options.precision=0] - Number of significant digits (0 for auto)\n * @returns {Function} A function that takes a file size and returns formatted output\n * @example\n * const formatBytes = partial({round: 1, standard: \"IEC\"});\n * formatBytes(1024) // \"1.0 KiB\"\n * formatBytes(2048) // \"2.0 KiB\"\n */\n// Partial application for functional programming\nexport function partial ({\n\tbits = false,\n\tpad = false,\n\tbase = -1,\n\tround = 2,\n\tlocale = EMPTY,\n\tlocaleOptions = {},\n\tseparator = EMPTY,\n\tspacer = SPACE,\n\tsymbols = {},\n\tstandard = EMPTY,\n\toutput = STRING,\n\tfullform = false,\n\tfullforms = [],\n\texponent = -1,\n\troundingMethod = ROUND,\n\tprecision = 0\n} = {}) {\n\treturn arg => filesize(arg, {\n\t\tbits,\n\t\tpad,\n\t\tbase,\n\t\tround,\n\t\tlocale,\n\t\tlocaleOptions,\n\t\tseparator,\n\t\tspacer,\n\t\tsymbols,\n\t\tstandard,\n\t\toutput,\n\t\tfullform,\n\t\tfullforms,\n\t\texponent,\n\t\troundingMethod,\n\t\tprecision\n\t});\n}\n"],"names":["IEC","JEDEC","SI","BITS","BYTE","BYTES","ARRAY","OBJECT","STRING","EXPONENT","ROUND","EMPTY","STRINGS","symbol","iec","bits","bytes","jedec","fullform","BINARY_POWERS","DECIMAL_POWERS","LOG_2_1024","Math","log","LOG_10_1000","STANDARD_CONFIGS","isDecimal","ceil","actualStandard","calculateOptimizedValue","num","e","result","filesize","arg","pad","base","round","locale","localeOptions","separator","spacer","symbols","standard","output","fullforms","exponent","roundingMethod","precision","Number","val","u","getBaseConfiguration","full","neg","roundingFunc","isNaN","TypeError","toPrecision","value","unit","join","handleZeroValue","floor","valueResult","valueExponent","p","pow","precisionResult","includes","applyPrecisionHandling","symbolTable","toLocaleString","length","toString","replace","resultStr","x","match","pop","tmp","split","s","l","n","padEnd","applyNumberFormatting","partial"],"mappings":"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"}