{"version":3,"file":"filesize.umd.min.js","sources":["../src/constants.js","../src/filesize.js"],"sourcesContent":["// Error Messages\nexport const INVALID_NUMBER = \"Invalid number\";\nexport const INVALID_ROUND = \"Invalid rounding method\";\n\n// Standard Types\nexport const IEC = \"iec\";\nexport const JEDEC = \"jedec\";\nexport const SI = \"si\";\n\n// Unit Types\nexport const BIT = \"bit\";\nexport const BITS = \"bits\";\nexport const BYTE = \"byte\";\nexport const BYTES = \"bytes\";\nexport const SI_KBIT = \"kbit\";\nexport const SI_KBYTE = \"kB\";\n\n// Output Format Types\nexport const ARRAY = \"array\";\nexport const FUNCTION = \"function\";\nexport const OBJECT = \"object\";\nexport const STRING = \"string\";\n\n// Processing Constants\nexport const EXPONENT = \"exponent\";\nexport const ROUND = \"round\";\n\n// Special Characters and Values\nexport const E = \"e\";\nexport const EMPTY = \"\";\nexport const PERIOD = \".\";\nexport const S = \"s\";\nexport const SPACE = \" \";\nexport const ZERO = \"0\";\n\n// Data Structures\nexport const STRINGS = {\n\tsymbol: {\n\t\tiec: {\n\t\t\tbits: [\"bit\", \"Kibit\", \"Mibit\", \"Gibit\", \"Tibit\", \"Pibit\", \"Eibit\", \"Zibit\", \"Yibit\"],\n\t\t\tbytes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"]\n\t\t},\n\t\tjedec: {\n\t\t\tbits: [\"bit\", \"Kbit\", \"Mbit\", \"Gbit\", \"Tbit\", \"Pbit\", \"Ebit\", \"Zbit\", \"Ybit\"],\n\t\t\tbytes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n\t\t}\n\t},\n\tfullform: {\n\t\tiec: [\"\", \"kibi\", \"mebi\", \"gibi\", \"tebi\", \"pebi\", \"exbi\", \"zebi\", \"yobi\"],\n\t\tjedec: [\"\", \"kilo\", \"mega\", \"giga\", \"tera\", \"peta\", \"exa\", \"zetta\", \"yotta\"]\n\t}\n};\n\n// Pre-computed lookup tables for performance optimization\nexport const BINARY_POWERS = [\n\t1, // 2^0\n\t1024, // 2^10\n\t1048576, // 2^20\n\t1073741824, // 2^30\n\t1099511627776, // 2^40\n\t1125899906842624, // 2^50\n\t1152921504606846976, // 2^60\n\t1180591620717411303424, // 2^70\n\t1208925819614629174706176 // 2^80\n];\n\nexport const DECIMAL_POWERS = [\n\t1, // 10^0\n\t1000, // 10^3\n\t1000000, // 10^6\n\t1000000000, // 10^9\n\t1000000000000, // 10^12\n\t1000000000000000, // 10^15\n\t1000000000000000000, // 10^18\n\t1000000000000000000000, // 10^21\n\t1000000000000000000000000 // 10^24\n];\n\n// Pre-computed log values for faster exponent calculation\nexport const LOG_2_1024 = Math.log(1024);\nexport const LOG_10_1000 = Math.log(1000);\n","import {\n\tARRAY,\n\tBINARY_POWERS,\n\tBIT,\n\tBITS,\n\tBYTE,\n\tBYTES,\n\tDECIMAL_POWERS,\n\tE,\n\tEMPTY,\n\tEXPONENT,\n\tFUNCTION,\n\tIEC,\n\tINVALID_NUMBER,\n\tINVALID_ROUND,\n\tJEDEC,\n\tLOG_2_1024,\n\tLOG_10_1000,\n\tOBJECT,\n\tPERIOD,\n\tROUND,\n\tS,\n\tSI,\n\tSI_KBIT,\n\tSI_KBYTE,\n\tSPACE,\n\tSTRING,\n\tSTRINGS,\n\tZERO\n} from \"./constants.js\";\n\n/**\n * Converts a file size in bytes to a human-readable string with appropriate units\n * @param {number|string|bigint} arg - The file size in bytes to convert\n * @param {Object} [options={}] - Configuration options for formatting\n * @param {boolean} [options.bits=false] - If true, calculates bits instead of bytes\n * @param {boolean} [options.pad=false] - If true, pads decimal places to match round parameter\n * @param {number} [options.base=-1] - Number base (2 for binary, 10 for decimal, -1 for auto)\n * @param {number} [options.round=2] - Number of decimal places to round to\n * @param {string|boolean} [options.locale=\"\"] - Locale for number formatting, true for system locale\n * @param {Object} [options.localeOptions={}] - Additional options for locale formatting\n * @param {string} [options.separator=\"\"] - Custom decimal separator\n * @param {string} [options.spacer=\" \"] - String to separate value and unit\n * @param {Object} [options.symbols={}] - Custom unit symbols\n * @param {string} [options.standard=\"\"] - Unit standard to use (SI, IEC, JEDEC)\n * @param {string} [options.output=\"string\"] - Output format: \"string\", \"array\", \"object\", or \"exponent\"\n * @param {boolean} [options.fullform=false] - If true, uses full unit names instead of abbreviations\n * @param {Array} [options.fullforms=[]] - Custom full unit names\n * @param {number} [options.exponent=-1] - Force specific exponent (-1 for auto)\n * @param {string} [options.roundingMethod=\"round\"] - Math rounding method to use\n * @param {number} [options.precision=0] - Number of significant digits (0 for auto)\n * @returns {string|Array|Object|number} Formatted file size based on output option\n * @throws {TypeError} When arg is not a valid number or roundingMethod is invalid\n * @example\n * filesize(1024) // \"1 KB\"\n * filesize(1024, {bits: true}) // \"8 Kb\"\n * filesize(1024, {output: \"object\"}) // {value: 1, symbol: \"KB\", exponent: 1, unit: \"KB\"}\n */\nexport function filesize (arg, {\n\tbits = false,\n\tpad = false,\n\tbase = -1,\n\tround = 2,\n\tlocale = EMPTY,\n\tlocaleOptions = {},\n\tseparator = EMPTY,\n\tspacer = SPACE,\n\tsymbols = {},\n\tstandard = EMPTY,\n\toutput = STRING,\n\tfullform = false,\n\tfullforms = [],\n\texponent = -1,\n\troundingMethod = ROUND,\n\tprecision = 0\n} = {}) {\n\tlet e = exponent,\n\t\tnum = Number(arg),\n\t\tresult = [],\n\t\tval = 0,\n\t\tu = EMPTY;\n\n\t// Optimized base & standard synchronization with early returns\n\tlet isDecimal, ceil, actualStandard;\n\tif (standard === SI) {\n\t\tisDecimal = true;\n\t\tceil = 1000;\n\t\tactualStandard = JEDEC;\n\t} else if (standard === IEC) {\n\t\tisDecimal = false;\n\t\tceil = 1024;\n\t\tactualStandard = IEC;\n\t} else if (standard === JEDEC) {\n\t\tisDecimal = false; // JEDEC uses binary (1024) by default\n\t\tceil = 1024;\n\t\tactualStandard = JEDEC;\n\t} else if (base === 2) {\n\t\tisDecimal = false;\n\t\tceil = 1024;\n\t\tactualStandard = IEC;\n\t} else {\n\t\tisDecimal = true;\n\t\tceil = 1000;\n\t\tactualStandard = JEDEC;\n\t}\n\n\tconst full = fullform === true,\n\t\tneg = num < 0,\n\t\troundingFunc = Math[roundingMethod];\n\n\tif (typeof arg !== \"bigint\" && isNaN(arg)) {\n\t\tthrow new TypeError(INVALID_NUMBER);\n\t}\n\n\tif (typeof roundingFunc !== FUNCTION) {\n\t\tthrow new TypeError(INVALID_ROUND);\n\t}\n\n\t// Flipping a negative number to determine the size\n\tif (neg) {\n\t\tnum = -num;\n\t}\n\n\t// Fast path for zero\n\tif (num === 0) {\n\t\tresult[0] = precision > 0 ? (0).toPrecision(precision) : 0;\n\t\tu = result[1] = STRINGS.symbol[actualStandard][bits ? BITS : BYTES][0];\n\t\t\n\t\tif (output === EXPONENT) {\n\t\t\treturn 0;\n\t\t}\n\t\t\n\t\t// Skip most processing for zero case\n\t\tif (symbols[result[1]]) {\n\t\t\tresult[1] = symbols[result[1]];\n\t\t}\n\t\t\n\t\tif (full) {\n\t\t\tresult[1] = fullforms[0] || STRINGS.fullform[actualStandard][0] + (bits ? BIT : BYTE);\n\t\t}\n\t\t\n\t\treturn output === ARRAY ? result : output === OBJECT ? {\n\t\t\tvalue: result[0],\n\t\t\tsymbol: result[1],\n\t\t\texponent: 0,\n\t\t\tunit: u\n\t\t} : result.join(spacer);\n\t}\n\n\t// Optimized exponent calculation using pre-computed log values\n\tif (e === -1 || isNaN(e)) {\n\t\tif (isDecimal) {\n\t\t\te = Math.floor(Math.log(num) / LOG_10_1000);\n\t\t} else {\n\t\t\te = Math.floor(Math.log(num) / LOG_2_1024);\n\t\t}\n\n\t\tif (e < 0) {\n\t\t\te = 0;\n\t\t}\n\t}\n\n\t// Exceeding supported length, time to reduce & multiply\n\tif (e > 8) {\n\t\tif (precision > 0) {\n\t\t\tprecision += 8 - e;\n\t\t}\n\t\te = 8;\n\t}\n\n\tif (output === EXPONENT) {\n\t\treturn e;\n\t}\n\n\t// Use pre-computed lookup tables (e is always <= 8, arrays have 9 elements)\n\tlet d;\n\tif (isDecimal) {\n\t\td = DECIMAL_POWERS[e];\n\t} else {\n\t\td = BINARY_POWERS[e];\n\t}\n\t\n\tval = num / d;\n\n\tif (bits) {\n\t\tval = val * 8;\n\n\t\tif (val >= ceil && e < 8) {\n\t\t\tval = val / ceil;\n\t\t\te++;\n\t\t}\n\t}\n\n\t// Optimize rounding calculation\n\tconst p = e > 0 && round > 0 ? Math.pow(10, round) : 1;\n\tresult[0] = p === 1 ? roundingFunc(val) : roundingFunc(val * p) / p;\n\n\tif (result[0] === ceil && e < 8 && exponent === -1) {\n\t\tresult[0] = 1;\n\t\te++;\n\t}\n\n\t// Setting optional precision\n\tif (precision > 0) {\n\t\tresult[0] = result[0].toPrecision(precision);\n\n\t\tif (result[0].includes(E) && e < 8) {\n\t\t\te++;\n\t\t\t// Recalculate with new exponent (e is always <= 8)\n\t\t\tif (isDecimal) {\n\t\t\t\td = DECIMAL_POWERS[e];\n\t\t\t} else {\n\t\t\t\td = BINARY_POWERS[e];\n\t\t\t}\n\t\t\tval = num / d;\n\t\t\tresult[0] = (p === 1 ? roundingFunc(val) : roundingFunc(val * p) / p).toPrecision(precision);\n\t\t}\n\t}\n\n\t// Cache symbol lookup\n\tconst symbolTable = STRINGS.symbol[actualStandard][bits ? BITS : BYTES];\n\tu = result[1] = (isDecimal && e === 1) ? (bits ? SI_KBIT : SI_KBYTE) : symbolTable[e];\n\n\t// Decorating a 'diff'\n\tif (neg) {\n\t\tresult[0] = -result[0];\n\t}\n\n\t// Applying custom symbol\n\tif (symbols[result[1]]) {\n\t\tresult[1] = symbols[result[1]];\n\t}\n\n\t// Optimized locale/separator handling\n\tif (locale === true) {\n\t\tresult[0] = result[0].toLocaleString();\n\t} else if (locale.length > 0) {\n\t\tresult[0] = result[0].toLocaleString(locale, localeOptions);\n\t} else if (separator.length > 0) {\n\t\tresult[0] = result[0].toString().replace(PERIOD, separator);\n\t}\n\n\tif (pad && round > 0) {\n\t\tconst resultStr = result[0].toString(),\n\t\t\tx = separator || ((resultStr.match(/(\\D)/g) || []).pop() || PERIOD),\n\t\t\ttmp = resultStr.split(x),\n\t\t\ts = tmp[1] || EMPTY,\n\t\t\tl = s.length,\n\t\t\tn = round - l;\n\n\t\tresult[0] = `${tmp[0]}${x}${s.padEnd(l + n, ZERO)}`;\n\t}\n\n\tif (full) {\n\t\tresult[1] = fullforms[e] || STRINGS.fullform[actualStandard][e] + (bits ? BIT : BYTE) + (result[0] === 1 ? EMPTY : S);\n\t}\n\n\t// Optimized return logic\n\tif (output === ARRAY) {\n\t\treturn result;\n\t}\n\t\n\tif (output === OBJECT) {\n\t\treturn {\n\t\t\tvalue: result[0],\n\t\t\tsymbol: result[1],\n\t\t\texponent: e,\n\t\t\tunit: u\n\t\t};\n\t}\n\t\n\treturn spacer === SPACE ? `${result[0]} ${result[1]}` : result.join(spacer);\n}\n\n/**\n * Creates a partially applied version of filesize with preset options\n * @param {Object} [options={}] - Default options to apply to the returned function\n * @param {boolean} [options.bits=false] - If true, calculates bits instead of bytes\n * @param {boolean} [options.pad=false] - If true, pads decimal places to match round parameter\n * @param {number} [options.base=-1] - Number base (2 for binary, 10 for decimal, -1 for auto)\n * @param {number} [options.round=2] - Number of decimal places to round to\n * @param {string|boolean} [options.locale=\"\"] - Locale for number formatting, true for system locale\n * @param {Object} [options.localeOptions={}] - Additional options for locale formatting\n * @param {string} [options.separator=\"\"] - Custom decimal separator\n * @param {string} [options.spacer=\" \"] - String to separate value and unit\n * @param {Object} [options.symbols={}] - Custom unit symbols\n * @param {string} [options.standard=\"\"] - Unit standard to use (SI, IEC, JEDEC)\n * @param {string} [options.output=\"string\"] - Output format: \"string\", \"array\", \"object\", or \"exponent\"\n * @param {boolean} [options.fullform=false] - If true, uses full unit names instead of abbreviations\n * @param {Array} [options.fullforms=[]] - Custom full unit names\n * @param {number} [options.exponent=-1] - Force specific exponent (-1 for auto)\n * @param {string} [options.roundingMethod=\"round\"] - Math rounding method to use\n * @param {number} [options.precision=0] - Number of significant digits (0 for auto)\n * @returns {Function} A function that takes a file size and returns formatted output\n * @example\n * const formatBytes = partial({round: 1, standard: \"IEC\"});\n * formatBytes(1024) // \"1.0 KiB\"\n * formatBytes(2048) // \"2.0 KiB\"\n */\n// Partial application for functional programming\nexport function partial ({\n\tbits = false,\n\tpad = false,\n\tbase = -1,\n\tround = 2,\n\tlocale = EMPTY,\n\tlocaleOptions = {},\n\tseparator = EMPTY,\n\tspacer = SPACE,\n\tsymbols = {},\n\tstandard = EMPTY,\n\toutput = STRING,\n\tfullform = false,\n\tfullforms = [],\n\texponent = -1,\n\troundingMethod = ROUND,\n\tprecision = 0\n} = {}) {\n\treturn arg => filesize(arg, {\n\t\tbits,\n\t\tpad,\n\t\tbase,\n\t\tround,\n\t\tlocale,\n\t\tlocaleOptions,\n\t\tseparator,\n\t\tspacer,\n\t\tsymbols,\n\t\tstandard,\n\t\toutput,\n\t\tfullform,\n\t\tfullforms,\n\t\texponent,\n\t\troundingMethod,\n\t\tprecision\n\t});\n}\n"],"names":["g","f","exports","module","define","amd","globalThis","self","filesize","this","IEC","JEDEC","BITS","BYTE","BYTES","ARRAY","OBJECT","STRING","EXPONENT","ROUND","EMPTY","STRINGS","symbol","iec","bits","bytes","jedec","fullform","BINARY_POWERS","DECIMAL_POWERS","LOG_2_1024","Math","log","LOG_10_1000","arg","pad","base","round","locale","localeOptions","separator","spacer","symbols","standard","output","fullforms","exponent","roundingMethod","precision","isDecimal","ceil","actualStandard","e","num","Number","result","val","u","full","neg","roundingFunc","isNaN","TypeError","toPrecision","value","unit","join","floor","d","p","pow","includes","symbolTable","toLocaleString","length","toString","replace","resultStr","x","match","pop","tmp","split","s","l","n","padEnd","partial"],"mappings":"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"}